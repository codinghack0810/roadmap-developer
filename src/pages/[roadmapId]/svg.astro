---
import { EditorRoadmap } from '../../components/EditorRoadmap/EditorRoadmap';
import FrameRenderer from '../../components/FrameRenderer/FrameRenderer.astro';
import SkeletonLayout from '../../layouts/SkeletonLayout.astro';
import { getOpenGraphImageUrl } from '../../lib/open-graph';
import { type RoadmapFrontmatter, getRoadmapIds } from '../../lib/roadmap';

export async function getStaticPaths() {
  const roadmapIds = await getRoadmapIds();

  return roadmapIds.map((roadmapId) => ({
    params: { roadmapId },
  }));
}

interface Params extends Record<string, string | undefined> {
  roadmapId: string;
}

const { roadmapId } = Astro.params as Params;
const roadmapFile = await import(
  `../../data/roadmaps/${roadmapId}/${roadmapId}.md`
);
const roadmapData = roadmapFile.frontmatter as RoadmapFrontmatter;

const ogImageUrl =
  roadmapData?.seo?.ogImageUrl ||
  getOpenGraphImageUrl({
    group: 'roadmap',
    resourceId: roadmapId,
  });
---

<SkeletonLayout
  permalink={`/${roadmapId}`}
  title={roadmapData?.seo?.title}
  briefTitle={roadmapData.briefTitle}
  ogImageUrl={ogImageUrl}
  description={roadmapData.seo.description}
  keywords={roadmapData.seo.keywords}
  resourceId={roadmapId}
  resourceType='roadmap'
  noIndex={true}
>
  <div class='container relative !max-w-[1000px]'>
    {
      roadmapData?.renderer === 'editor' ? (
        <EditorRoadmap
          resourceId={roadmapId}
          resourceType='roadmap'
          dimensions={roadmapData.dimensions!}
          client:load
        />
      ) : (
        <FrameRenderer
          resourceType={'roadmap'}
          resourceId={roadmapId}
          dimensions={roadmapData.dimensions}
        />
      )
    }
  </div>
</SkeletonLayout>
